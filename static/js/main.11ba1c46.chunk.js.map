{"version":3,"sources":["FeedContext.tsx","utils/utils.ts","assets/profile-pic.png","components/Avatar.tsx","assets/missing-avatar.png","components/CommentItem.tsx","components/PostItem.tsx","App.tsx","index.tsx"],"names":["dateParser","_key","value","a","exec","Date","b","split","FeedContext","createContext","FeedProvider","children","localPosts","JSON","parse","localStorage","getItem","localComments","useState","posts","setPosts","comments","setComments","Provider","updatedPosts","setItem","stringify","updatedComments","useFeed","context","useContext","undefined","Error","ONE_HOUR","dateToString","date","dayDate","dayjs","diff","diffDay","minute","hour","format","SizeDimension","Avatar","className","size","src","profilePicture","width","height","alt","onError","e","target","onerror","missingAvatar","CommentItem","comment","text","likes","createdDate","createdBy","isEditMode","setEditMode","editText","setEditText","updateComment","updatedComment","slice","id","handleCommentEditKeyPress","key","style","backgroundColor","firstName","lastName","fontSize","occupation","rows","placeholder","resize","autoFocus","onBlur","onKeyPress","onChange","onClick","icon","faHeart","faPencilAlt","isDeleted","faTrash","PostItem","post","showCommentSection","setShowCommentSection","postComments","useMemo","filter","postId","sort","getTime","updatePost","updatedPost","handlePostEditKeyPress","test","faMapMarkerAlt","location","state","country","type","data-bs-toggle","aria-expanded","faEllipsisH","aria-labelledby","disabled","faCircle","length","cursor","faCommentDots","find","Me","addComment","borderRadius","borderStyle","map","ContentCreator","message","setMessage","faPhotoVideo","newPost","addPost","Feed","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.11ba1c46.chunk.js","sourcesContent":["import {createContext, ReactNode, useContext, useState} from 'react';\r\n\r\nimport {Comment} from './types/comment';\r\nimport {Post} from './types/post';\r\n\r\nexport type FeedContextProps = {\r\n    posts: Post[],\r\n    setPosts: (posts: Post[]) => void,\r\n    comments: Comment[],\r\n    setComments: (comments: Comment[]) => void\r\n}\r\n\r\ntype FeedProviderProps = {\r\n    children?: ReactNode;\r\n}\r\n\r\n// This is passed into the JSON.parse() call as the reviver so that\r\n// dates formatted as JSON strings will be converted into JS Date objects.\r\n// This code was taken from https://weblog.west-wind.com/posts/2014/jan/06/javascript-json-date-parsing-and-real-dates\r\nconst dateParser = (_key: any, value: any) => {\r\n    // eslint-disable-next-line\r\n    var reISO = /^(\\d{4})-(\\d{2})-(\\d{2})T(\\d{2}):(\\d{2}):(\\d{2}(?:\\.\\d*))(?:Z|(\\+|-)([\\d|:]*))?$/;\r\n    // eslint-disable-next-line\r\n    var reMsAjax = /^\\/Date\\((d|-|.*)\\)[\\/|\\\\]$/;\r\n    \r\n    if (typeof value === 'string') {\r\n        var a = reISO.exec(value);\r\n        if (a)\r\n            return new Date(value);\r\n        a = reMsAjax.exec(value);\r\n        if (a) {\r\n            var b = a[1].split(/[-+,.]/);\r\n            return new Date(b[0] ? +b[0] : 0 - +b[1]);\r\n        }\r\n    }\r\n    return value;\r\n}\r\n\r\nconst FeedContext = createContext<FeedContextProps>({} as FeedContextProps);\r\n\r\nexport function FeedProvider({ children }: FeedProviderProps) {\r\n    const localPosts: Post[] = JSON.parse(localStorage.getItem('postData') || '[]', dateParser);\r\n    const localComments: Comment[] = JSON.parse(localStorage.getItem('commentData') || '[]', dateParser);\r\n\r\n\r\n    const [posts, setPosts] = useState<Post[]>(localPosts);\r\n    const [comments, setComments] = useState<Comment[]>(localComments);\r\n\r\n    const updatePosts = (updatedPosts: Post[]) => {\r\n        localStorage.setItem('postData', JSON.stringify(updatedPosts));\r\n        setPosts(updatedPosts);\r\n    }\r\n\r\n    const updateComments = (updatedComments: Comment[]) => {\r\n        localStorage.setItem('commentData', JSON.stringify(updatedComments));\r\n        setComments(updatedComments);\r\n    }\r\n\r\n    return (\r\n        <FeedContext.Provider value={{posts: posts, setPosts: updatePosts, comments: comments, setComments: updateComments}}>\r\n            {children}\r\n        </FeedContext.Provider>\r\n    )\r\n}\r\n\r\nexport function useFeed() {\r\n    const context = useContext(FeedContext);\r\n    if(context === undefined) {\r\n        throw new Error('useFeed must be used within a FeedProvider');\r\n    }\r\n    return context;\r\n}","import dayjs from 'dayjs'\r\n\r\nconst ONE_MINUTE = 60 * 1000;\r\nconst ONE_HOUR = 60 * ONE_MINUTE;\r\nconst ONE_DAY = ONE_HOUR * 24;\r\n\r\nexport function dateToString(date: Date): string {\r\n    const dayDate = dayjs(date);\r\n\r\n    const diff = dayjs().diff(dayDate);\r\n    const diffDay = dayjs(diff);\r\n\r\n    if(diff < ONE_MINUTE) {\r\n        return 'Just now';\r\n    }\r\n\r\n    if(diff < ONE_HOUR) {\r\n        return `${diffDay.minute()} minutes ago`;\r\n    }\r\n\r\n    if(diff < ONE_DAY) {\r\n        return `${diffDay.hour()} hours ago`;\r\n    }\r\n\r\n    return diffDay.format('MM/DD/YYYY');\r\n}","export default __webpack_public_path__ + \"static/media/profile-pic.6fb0befb.png\";","import profilePicture from '../assets/profile-pic.png';\r\nimport missingAvatar from '../assets/missing-avatar.png'\r\n\r\nenum SizeDimension {\r\n    sm = 40,\r\n    lg = 60\r\n}\r\n\r\ntype AvatarProps = {\r\n    className?: string\r\n    size: 'sm' | 'lg'\r\n}\r\n\r\nconst Avatar = ({className, size}: AvatarProps) => {\r\n    return (\r\n        <img \r\n            src={profilePicture} \r\n            className={'rounded-circle ' + className ?? ''} \r\n            width={SizeDimension[size]} \r\n            height={SizeDimension[size]}\r\n            alt=\"avatar\"\r\n            // @ts-ignore\r\n            onError={e => {e.target.onerror = null; e.target.src = missingAvatar}}            \r\n        />\r\n    )\r\n}\r\n\r\nexport default Avatar;","export default __webpack_public_path__ + \"static/media/missing-avatar.c3f94521.png\";","import { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faHeart, faPencilAlt, faTrash } from '@fortawesome/free-solid-svg-icons'\r\nimport {Comment} from '../types/comment'\r\nimport { dateToString } from '../utils/utils';\r\nimport { useFeed } from '../FeedContext';\r\nimport Avatar from './Avatar';\r\nimport { useState } from 'react';\r\n\r\nconst CommentItem = (comment: Comment) => {\r\n  const {text, likes, createdDate, createdBy} = comment;\r\n\r\n  const {comments, setComments} = useFeed();\r\n  \r\n  const [isEditMode, setEditMode] = useState<boolean>(false);\r\n  const [editText, setEditText] = useState<string>(text);\r\n\r\n  const updateComment = (updatedComment: Comment) => {\r\n    setComments([\r\n      ...comments.slice(0, comment.id - 1), \r\n      {\r\n        ...comments[comment.id - 1],\r\n        ...updatedComment\r\n      },\r\n      ...comments.slice(comment.id)\r\n    ]);\r\n  }\r\n\r\n  const handleCommentEditKeyPress = (e: any) => {\r\n    if(e.key === 'Enter' && e.target.value !== '') {\r\n      updateComment({...comment, text: e.target.value});\r\n      setEditMode(false);\r\n    }\r\n  }\r\n\r\n  const renderTextContent = () => {\r\n    if(!isEditMode) {\r\n      return text\r\n    }\r\n\r\n    return (\r\n      <textarea \r\n        className=\"form-control border-0 my-2\" \r\n        id=\"commentEditTextarea\" \r\n        rows={2} \r\n        value={editText}\r\n        placeholder=\"Add a comment\" \r\n        style={{resize: 'none'}}\r\n        autoFocus\r\n        onBlur={() => setEditMode(false)}\r\n        onKeyPress={handleCommentEditKeyPress}\r\n        onChange={e => setEditText(e.target.value)}\r\n      />\r\n    )\r\n  }\r\n\r\n  return (\r\n    <div className=\"d-flex flex-row mt-3 mb-3 w-100\">\r\n      <Avatar className=\"me-2\" size=\"sm\"/>\r\n      <div className=\"card w-100\" style={{backgroundColor: '#D9E1EB'}}>\r\n        <div className=\"card-body\">\r\n          <div className=\"d-flex justify-content-between\">\r\n            <span className=\"fw-bold\">{`${createdBy.firstName} ${createdBy.lastName}`}</span>\r\n            <span className=\"text-secondary\" style={{fontSize: 14}}>{dateToString(createdDate)}</span>\r\n          </div>\r\n          <span className=\"text-primary\" style={{fontSize: 14}}>{createdBy.occupation}</span>\r\n          <div style={{fontSize: 14}}>\r\n            {renderTextContent()}\r\n          </div>\r\n          <div className=\"d-flex text-secondary\">\r\n            <span className=\"me-3\">{likes} Likes</span>\r\n            <span className=\"me-3\">|</span>\r\n            <button className=\"btn btn-link link-secondary me-3 p-0\" onClick={() => updateComment({...comment, likes: comment.likes + 1})}>\r\n              <FontAwesomeIcon className=\"me-2\" icon={faHeart} style={{fontSize: 14}}/>\r\n              Like\r\n            </button>\r\n            <span className=\"me-3\">|</span>\r\n            <button className=\"btn btn-link link-secondary me-3 p-0\" onClick={() => setEditMode(true)}>\r\n              <FontAwesomeIcon className=\"me-2\" icon={faPencilAlt} style={{fontSize: 14}}/>\r\n              Edit\r\n            </button>\r\n            <span className=\"me-3\">|</span>\r\n            <button className=\"btn btn-link link-secondary me-3 p-0\" onClick={() => updateComment({...comment, isDeleted: true})}>\r\n              <FontAwesomeIcon className=\"me-2\" icon={faTrash} style={{fontSize: 14}}/>\r\n              Delete\r\n            </button>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default CommentItem;","import { useMemo, useState } from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCircle, faCommentDots, faEllipsisH, faHeart, faMapMarkerAlt } from '@fortawesome/free-solid-svg-icons'\r\nimport {Post} from '../types/post'\r\nimport {Comment} from '../types/comment'\r\nimport CommentItem from './CommentItem';\r\nimport { dateToString } from '../utils/utils';\r\nimport { useFeed } from '../FeedContext';\r\nimport Avatar from './Avatar';\r\nimport Me from '../assets/Me.json';\r\n\r\nconst PostItem = (post: Post) => {\r\n\r\n    const {id, text, likes, createdDate, createdBy} = post;\r\n\r\n    const {posts, setPosts, comments, setComments} = useFeed();\r\n  \r\n    const [showCommentSection, setShowCommentSection] = useState<boolean>(false);\r\n    const [isEditMode, setEditMode] = useState<boolean>(false);\r\n    const [editText, setEditText] = useState<string>(text);\r\n  \r\n    const postComments: Comment[] = useMemo(() => {\r\n      return comments\r\n              .filter(comment => comment.postId === id && !comment.isDeleted)\r\n              .sort((a,b) => b.createdDate.getTime() - a.createdDate.getTime());\r\n    }, [id, comments])\r\n\r\n    const addComment = (text: string) => {\r\n      const post: Post | null = posts.find(post => post.id === id) ?? null;\r\n  \r\n      if(post) {\r\n        const comment: Comment = {\r\n          id: comments.length + 1,\r\n          postId: post.id,\r\n          text: text,\r\n          likes: 0,\r\n          createdDate: new Date(),\r\n          createdBy: Me,\r\n          isDeleted: false\r\n        }\r\n        setComments([\r\n          ...comments, \r\n          comment\r\n        ]);\r\n      }\r\n    }\r\n\r\n    const updatePost = (updatedPost: Post) => {\r\n      setPosts([\r\n        ...posts.slice(0, post.id - 1), \r\n        {\r\n          ...posts[post.id - 1],\r\n          ...updatedPost\r\n        },\r\n        ...posts.slice(post.id)\r\n      ]);\r\n    }\r\n  \r\n    const handleCommentKeyPress = (e: any) => {\r\n      // Create the comment if the key is Enter and the value exists\r\n      if(e.key === 'Enter' && e.target.value !== '') {\r\n        addComment(e.target.value);\r\n        e.target.value = \"\";\r\n      }\r\n    }\r\n\r\n    const handlePostEditKeyPress = (e: any) => {\r\n      // Update the post if the key is Enter and the value isn't whitespace\r\n      if(e.key === 'Enter' && !/\\s/.test(e.target.value)) {\r\n        updatePost({...post, text: e.target.value});\r\n        setEditMode(false);\r\n      }\r\n    }\r\n  \r\n    const renderTextContent = () => {\r\n      if(!isEditMode) {\r\n        return text\r\n      }\r\n\r\n      return (\r\n        <textarea \r\n          className=\"form-control border-0 ms-2 me-3 ps-1\" \r\n          id=\"postEditTextarea\" \r\n          rows={2} \r\n          value={editText}\r\n          placeholder=\"What is on your mind?\" \r\n          style={{resize: 'none'}}\r\n          autoFocus\r\n          onBlur={() => setEditMode(false)}\r\n          onKeyPress={handlePostEditKeyPress}\r\n          onChange={e => setEditText(e.target.value)}\r\n        />\r\n      )\r\n    }\r\n\r\n    return (\r\n      <div className=\"card shadow-sm rounded-3 mt-3\">\r\n        <div className=\"card-body\">\r\n          <div className=\"d-flex flex-row mb-3\">\r\n            <Avatar size=\"lg\"/>\r\n            <div className=\"d-flex flex-row w-100 justify-content-between\">\r\n              <div className=\"ms-3\">\r\n                <div className=\"fw-bold\">{`${createdBy.firstName} ${createdBy.lastName}`}</div>\r\n                <div className=\"text-primary fw-bold\" style={{fontSize: 12}}>\r\n                  <FontAwesomeIcon className=\"me-2\" icon={faMapMarkerAlt} />\r\n                  {createdBy.location.state}, {createdBy.location.country}\r\n                </div>\r\n                <div className=\"text-secondary fw-bold\" style={{fontSize: 12}}>{dateToString(createdDate)}</div>\r\n              </div>\r\n              <div className=\"dropdown dropstart my-auto\">\r\n                <button className=\"btn btn-link link-secondary p-0\" type=\"button\" id={`Post-${id}-dropdown-button`} data-bs-toggle=\"dropdown\" aria-expanded=\"false\">\r\n                  <FontAwesomeIcon icon={faEllipsisH} />\r\n                </button>\r\n                <ul className=\"dropdown-menu\" aria-labelledby={`Post-${id}-dropdown-button`}>\r\n                  <li><button className=\"btn btn-link dropdown-item\" onClick={() => setEditMode(true)} disabled={isEditMode}>Edit</button></li>\r\n                  <li><button className=\"btn btn-link dropdown-item\" onClick={() => updatePost({...post, isDeleted: true})}>Delete</button></li>\r\n                </ul>\r\n              </div>\r\n            </div>\r\n          </div>\r\n          <div>\r\n            {renderTextContent()}\r\n          </div>\r\n          <div className=\"d-flex text-secondary mt-2\">\r\n            {likes} Likes\r\n            <FontAwesomeIcon className=\"my-auto mx-1\" icon={faCircle} style={{fontSize: 4}} /> \r\n            {postComments.length} Comments\r\n          </div>\r\n        </div>\r\n        <div className=\"card-footer\">\r\n          <span>\r\n            <button className=\"btn btn-link link-secondary p-0\" onClick={() => updatePost({...post, likes: post.likes + 1 })}>\r\n              <FontAwesomeIcon className=\"me-2 text-secondary\" icon={faHeart} />\r\n              Like\r\n            </button>\r\n          </span>\r\n          <span className=\"ms-3\">\r\n            <button\r\n              className={`btn btn-link link-secondary p-0 ${showCommentSection || postComments.length > 0 ? 'fw-bold' : null}`}\r\n              onClick={() => setShowCommentSection(!showCommentSection)}\r\n              style={{cursor: 'pointer'}}\r\n            >\r\n              <FontAwesomeIcon className=\"me-2 text-secondary\" icon={faCommentDots} />\r\n              Comment\r\n            </button>\r\n          </span>\r\n          {(showCommentSection || postComments.length > 0) && (\r\n            <div>\r\n              <div className=\"d-flex flex-row mt-3 mb-3 w-100\">\r\n                <Avatar className=\"me-2\" size=\"sm\"/>\r\n                <input className=\"px-3 w-100\" placeholder=\"Add a comment\" onKeyPress={handleCommentKeyPress} style={{borderRadius: '25px', borderStyle: 'solid'}}/>\r\n              </div>\r\n              {postComments.map(comment => {\r\n                return (\r\n                  <CommentItem key={`Comment-${comment.id}`} {...comment} />\r\n                )\r\n              })}\r\n            </div>\r\n          )}\r\n        </div>\r\n      </div>\r\n    )\r\n}\r\n\r\nexport default PostItem;","import { useState } from 'react';\n\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faPhotoVideo } from '@fortawesome/free-solid-svg-icons'\nimport {Post} from './types/post';\n\nimport {FeedProvider, useFeed} from './FeedContext';\nimport PostItem from './components/PostItem';\nimport Avatar from './components/Avatar';\nimport Me from './assets/Me.json'\n\nconst ContentCreator = () => {\n\n  const {posts, setPosts} = useFeed();\n\n  const addPost = (text: string) => {\n    const newPost = {\n      id: posts.length + 1,\n      text: text,\n      likes: 0,\n      createdDate: new Date(),\n      createdBy: Me,\n      isDeleted: false\n    }\n    setPosts([...posts, newPost])\n  } \n\n  const [message, setMessage] = useState<string>(\"\");\n\n  return (\n    <div className=\"card shadow-sm rounded-3\">\n      <div className=\"card-body\">\n        <div className=\"mb-3 d-flex flex-row\">\n          <Avatar size=\"sm\"/>\n          <textarea \n            className=\"form-control border-0 ms-2 ps-1\" \n            id=\"postTextarea\" \n            rows={2} \n            placeholder=\"What is on your mind?\" \n            style={{resize: 'none'}}\n            value={message}\n            onChange={e => setMessage(e.target.value)}\n          />\n        </div>\n      </div>\n      <div className=\"card-footer bg-transparent\">\n        <div className=\"d-flex flex-wrap justify-content-between\">\n          <button type=\"button\" className=\"btn btn-dark rounded-pill\">\n            <FontAwesomeIcon className=\"me-2\" icon={faPhotoVideo} />\n            Photo/Video\n          </button>\n          <button \n            type=\"button\" \n            className=\"btn btn-primary\" \n            onClick={() => {\n              addPost(message);\n              setMessage(\"\");\n            }}\n            disabled={message.length === 0}\n          >\n            Post It\n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst Feed = () => {\n  const {posts} = useFeed();\n\n  return (\n    <div className=\"min-vh-100\" style={{backgroundColor: \"#D9E1EB\"}}>\n      <div className=\"container\">\n        <div className=\"py-3\">\n          <ContentCreator />\n          {posts.filter(post => !post.isDeleted).sort((a,b) => b.createdDate.getTime() - a.createdDate.getTime()).map((post: Post) => (\n            <PostItem \n              key={`Post-${post.id}`} \n              {...post}\n            />\n          ))}\n        </div>\n      </div>\n    </div>\n  )\n}\n\nfunction App() {\n  return (\n    <FeedProvider>\n      <Feed />\n    </FeedProvider>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\nimport App from './App';\nimport 'bootstrap/dist/js/bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}